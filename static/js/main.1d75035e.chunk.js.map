{"version":3,"sources":["components/CartesianPlane.js","components/Header.js","components/Footer.js","components/PerceptronContext.js","utils/CPDrawer.js","algoritmos/BackPropagationV2.js","components/PerceptronConfigs.js","components/ErrorChart.js","components/Alert.js","components/NN.js","pages/Perceptron.js","components/App.js","serviceWorker.js","index.js"],"names":["cpDrawer","Header","props","className","role","id","alt","xmlns","width","height","viewBox","data-name","transform","cx","cy","r","fill","d","Footer","PerceptronContext","createContext","CPDrawer","canvas","clases","this","widthCanvas","heightCanvas","x","y","ctx","getContext","cty","beginPath","moveTo","lineTo","stroke","font","fillStyle","i","fillText","XC","YC","value","color","fillRect","x1","y1","x2","y2","context","save","strokeStyle","restore","nn","mayor","ind","out","predict","k","length","setTransform","clearRect","CartesianPlane","useContext","perceptronState","setPerceptronState","canvasRef","useRef","useEffect","current","style","drawAxis","handleClick","event","preventDefault","entrenado","clase","claseSelect","rect","getBoundingClientRect","physicalXCoordinate","clientX","left","physicalYCoordinate","clientY","top","logicalXCoordinate","XL","logicalYCoordinate","YL","drawPoint","perceptron","border","onClick","onContextMenu","ref","BackPropagation","layersCount","layersNeuronsCount","learningRate","maxErrorAllowed","maxEpicNumber","fit","inputs","outputs","a","epicNumber","meanSquareError","accumulatedSquareError","forEach","inputData","indexInput","initFitData","sensitivity","net","forward","error","output","index","squareSum","reduce","accumulator","Math","pow","sqrt","backward","meanError","push","epoca","parseFloat","console","log","drawCanvas","state","layers","layer","indexLayer","neuron","indexNeuron","input","f","calculateSensitivities","weightsUpdate","j","fp","sum","inputTemp","JSON","parse","stringify","unshift","weight","ye","E","calcularX2","w","transferencia","initLayers","count","weights","random","clearCanvas","drawBarrido","point","indexOf","Promise","setTimeout","numCapas","label","PerceptronConfigs","useForm","defaultValues","learning_rate","max_error","max_epic_number","handleSubmit","errors","register","control","watch","getValues","useState","perceptronErrors","setPerceptronErrors","iniciado","setIniciado","initConf","setInitConf","setClaseSelect","type","iniciar","values","num_class","max_class","num_capas","num_n_capa1","max_capa1","num_n_capa2","max_capa2","randomColor","hexadecimal","Array","color_aleatorio","aleatorio","inferior","superior","numPosibilidades","aleat","floor","parseInt","iniciarPesos","trainingSet","message","neuronsPerLayer","backP","entrenar","xd","iterations","prevState","limiteAlcanzado","Form","onSubmit","as","TextField","name","required","validate","FormControl","component","FormLabel","RadioGroup","aria-label","onChange","target","map","FormControlLabel","key","Radio","size","fontSize","e","changeColor","trainedPerceptron","Button","fullWidth","defaultValue","ErrorChart","dataToShow","setDataToShow","itemsViewed","setItemsViewed","infoGrouped","setInfoGrouped","tempInfoGrouped","groupElements","firstDataToShow","data","objectIndex","insertedElements","variant","margin","right","bottom","dataKey","activeDot","interval","angle","dx","Alert","NN2","myGraph","ForceGraph3D","Object","nodes","links","numCapa","index2","numNeu","n","group","val","capa","source","weigth","document","getElementById","graphData","nodeLabel","linkLabel","nodeAutoColorBy","linkDirectionalParticles","linkDirectionalParticleSpeed","Perceptron","Container","fluid","Row","Col","md","span","sm","paddingBottom","errorAcumulado","NN","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1d75035e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState, useContext} from \"react\";\r\nimport { PerceptronContext } from \"./PerceptronContext\";\r\nimport CPDrawer from \"../utils/CPDrawer\";\r\n\r\nlet cpDrawer;\r\n\r\nconst CartesianPlane = (props) => {\r\n    //const [trainingSet, setTrainingSet] = useState([]);\r\n    const {perceptronState, setPerceptronState} = useContext(PerceptronContext);\r\n\r\n    const canvasRef = useRef(null)\r\n    \r\n    useEffect(() => {\r\n        canvasRef.current.style.width = \"auto\";\r\n        cpDrawer = new CPDrawer(canvasRef.current, perceptronState.clases)\r\n        setPerceptronState({\r\n            ...perceptronState,\r\n            cpDrawer: cpDrawer\r\n        })\r\n\r\n        cpDrawer.drawAxis();\r\n        \r\n    }, [])\r\n    \r\n    \r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        const entrenado = perceptronState.entrenado;\r\n        const clase = perceptronState.claseSelect;\r\n        const canvas = canvasRef.current,\r\n            rect = canvas.getBoundingClientRect(),\r\n            physicalXCoordinate = event.clientX - rect.left,\r\n            physicalYCoordinate = event.clientY - rect.top,\r\n            logicalXCoordinate = cpDrawer.XL(physicalXCoordinate),\r\n            logicalYCoordinate = cpDrawer.YL(physicalYCoordinate),    \r\n            value = [];\r\n            for (let i = 0; i < perceptronState.clases.length; i++) {\r\n                value[i] = (i == clase - 1) ? 1 : 0;\r\n            }\r\n\r\n        if(!entrenado){\r\n            cpDrawer.drawPoint(physicalXCoordinate, physicalYCoordinate, clase-1);\r\n            setPerceptronState({            \r\n                ...perceptronState,\r\n                x: [\r\n                    ...perceptronState.x,\r\n                    [\r\n                        logicalXCoordinate,\r\n                        logicalYCoordinate\r\n                    ]\r\n                ],\r\n                y: [\r\n                    ...perceptronState.y,\r\n                    value\r\n                ]\r\n            });\r\n        }else{\r\n            cpDrawer.drawPoint(\r\n                physicalXCoordinate, \r\n                physicalYCoordinate, \r\n                perceptronState.perceptron.predict([\r\n                    logicalXCoordinate, \r\n                    logicalYCoordinate                                        \r\n                ]));\r\n        }\r\n        \r\n\r\n        \r\n    }\r\n\r\n    return <>\r\n        <canvas\r\n            id=\"cartesian_plane\"\r\n            style={{border: \"1px solid #d1d1d1\"}}\r\n            onClick={handleClick}\r\n            onContextMenu={handleClick}\r\n            width={500}\r\n            height={500}\r\n            ref={canvasRef}\r\n        ></canvas>\r\n    </>\r\n}\r\n\r\nexport default CartesianPlane;","import React from \"react\";\r\nimport '../styles/Header.css';\r\n\r\nconst Header = (props) =>  {\r\n    return <>\r\n\r\n        <div className=\"toolbar\" role=\"banner\"></div>\r\n\r\n        <div className=\"content\">\r\n            <div className=\"card highlight-card card-small\">\r\n            <svg id=\"rocket\" alt=\"Rocket Ship\" xmlns=\"http://www.w3.org/2000/svg\" width=\"101.678\" height=\"101.678\" viewBox=\"0 0 101.678 101.678\">\r\n            <g id=\"Group_83\" data-name=\"Group 83\" transform=\"translate(-141 -696)\">\r\n                <circle id=\"Ellipse_8\" data-name=\"Ellipse 8\" cx=\"50.839\" cy=\"50.839\" r=\"50.839\" transform=\"translate(141 696)\" fill=\"#dd0031\"/>\r\n                <g id=\"Group_47\" data-name=\"Group 47\" transform=\"translate(165.185 720.185)\">\r\n                <path id=\"Path_33\" data-name=\"Path 33\" d=\"M3.4,42.615a3.084,3.084,0,0,0,3.553,3.553,21.419,21.419,0,0,0,12.215-6.107L9.511,30.4A21.419,21.419,0,0,0,3.4,42.615Z\" transform=\"translate(0.371 3.363)\" fill=\"#fff\"/>\r\n                <path id=\"Path_34\" data-name=\"Path 34\" d=\"M53.3,3.221A3.09,3.09,0,0,0,50.081,0,48.227,48.227,0,0,0,18.322,13.437c-6-1.666-14.991-1.221-18.322,7.218A33.892,33.892,0,0,1,9.439,25.1l-.333.666a3.013,3.013,0,0,0,.555,3.553L23.985,43.641a2.9,2.9,0,0,0,3.553.555l.666-.333A33.892,33.892,0,0,1,32.647,53.3c8.55-3.664,8.884-12.326,7.218-18.322A48.227,48.227,0,0,0,53.3,3.221ZM34.424,9.772a6.439,6.439,0,1,1,9.106,9.106,6.368,6.368,0,0,1-9.106,0A6.467,6.467,0,0,1,34.424,9.772Z\" transform=\"translate(0 0.005)\" fill=\"#fff\"/>\r\n                </g>\r\n            </g>\r\n            </svg>\r\n                <span>Inteligencia Artificial 2 - Back Propagation</span>\r\n                <svg id=\"rocket-smoke\" alt=\"Rocket Ship Smoke\" xmlns=\"http://www.w3.org/2000/svg\" width=\"516.119\" height=\"1083.632\" viewBox=\"0 0 516.119 1083.632\">\r\n                <path id=\"Path_40\" data-name=\"Path 40\" d=\"M644.6,141S143.02,215.537,147.049,870.207s342.774,201.755,342.774,201.755S404.659,847.213,388.815,762.2c-27.116-145.51-11.551-384.124,271.9-609.1C671.15,139.365,644.6,141,644.6,141Z\" transform=\"translate(-147.025 -140.939)\" fill=\"#f5f5f5\"/>\r\n            </svg>\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Footer = (props) =>  {\r\n\r\n    return <>\r\n        <svg id=\"clouds\" alt=\"Gray Clouds Background\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2611.084\" height=\"485.677\" viewBox=\"0 0 2611.084 485.677\">\r\n            <path id=\"Path_39\" data-name=\"Path 39\" d=\"M2379.709,863.793c10-93-77-171-168-149-52-114-225-105-264,15-75,3-140,59-152,133-30,2.83-66.725,9.829-93.5,26.25-26.771-16.421-63.5-23.42-93.5-26.25-12-74-77-130-152-133-39-120-212-129-264-15-54.084-13.075-106.753,9.173-138.488,48.9-31.734-39.726-84.4-61.974-138.487-48.9-52-114-225-105-264,15a162.027,162.027,0,0,0-103.147,43.044c-30.633-45.365-87.1-72.091-145.206-58.044-52-114-225-105-264,15-75,3-140,59-152,133-53,5-127,23-130,83-2,42,35,72,70,86,49,20,106,18,157,5a165.625,165.625,0,0,0,120,0c47,94,178,113,251,33,61.112,8.015,113.854-5.72,150.492-29.764a165.62,165.62,0,0,0,110.861-3.236c47,94,178,113,251,33,31.385,4.116,60.563,2.495,86.487-3.311,25.924,5.806,55.1,7.427,86.488,3.311,73,80,204,61,251-33a165.625,165.625,0,0,0,120,0c51,13,108,15,157-5a147.188,147.188,0,0,0,33.5-18.694,147.217,147.217,0,0,0,33.5,18.694c49,20,106,18,157,5a165.625,165.625,0,0,0,120,0c47,94,178,113,251,33C2446.709,1093.793,2554.709,922.793,2379.709,863.793Z\" transform=\"translate(142.69 -634.312)\" fill=\"#eee\"/>\r\n        </svg>\r\n    </>\r\n}\r\n\r\nexport default Footer;","import {createContext} from 'react';\r\n\r\nexport const PerceptronContext = createContext(null);","\r\nconst MAX_Y = 5, MAX_X = 5;\r\nconst MIN_Y = -5, MIN_X = -5;\r\nconst WIDTH = 10, HEIGHT = 10;\r\nclass CPDrawer {\r\n    constructor(canvas, clases) {\r\n        this.canvas = canvas;\r\n        this.widthCanvas = canvas.width;\r\n        this.heightCanvas = canvas.height;\r\n        this.clases = clases;\r\n    }\r\n\r\n\r\n    // Returns the physical x-coordinate of a logical x-coordinate:\r\n    XC(x) {\r\n        return (x - MIN_X) / (MAX_X - MIN_X) * this.widthCanvas\r\n    }\r\n\r\n    // Returns the physical y-coordinate of a logical y-coordinate:\r\n    YC(y) {\r\n        return this.heightCanvas - ((y - MIN_Y) * this.heightCanvas) / (MAX_Y - MIN_Y);\r\n    }\r\n\r\n    // Returns the logical x-coordinate of a physical x-coordinate:\r\n    XL(x) {\r\n        return ((x * (MAX_X - MIN_X)) / this.widthCanvas) + MIN_X\r\n    }\r\n\r\n    // Returns the logical y-coordinate of a physical y-coordinate:\r\n    YL(y) {\r\n        return MAX_Y - (y * (MAX_Y - MIN_Y)) / this.heightCanvas;\r\n    }\r\n\r\n    drawAxis() {\r\n        const ctx = this.canvas.getContext(\"2d\"),\r\n            cty = this.canvas.getContext(\"2d\");\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.widthCanvas / 2, 0);\r\n        ctx.lineTo(this.widthCanvas / 2, this.heightCanvas);\r\n        ctx.stroke();\r\n\r\n        cty.beginPath();\r\n        cty.moveTo(0, this.heightCanvas / 2);\r\n        cty.lineTo(this.widthCanvas, this.heightCanvas / 2);\r\n        cty.stroke();\r\n\r\n\r\n        ctx.font = \"10px Arial\";\r\n        ctx.fillStyle = \"#000\"\r\n        for (let i = MIN_X; i < MAX_X; i++) {\r\n            if (i === 0) continue\r\n            ctx.fillText(`${i}`, this.XC(i), this.YC(-0.2));\r\n            ctx.fillText(`${i}`, this.XC(0.1), this.YC(i));\r\n        }\r\n        ctx.fillText(`${MAX_X}`, this.widthCanvas - 10, this.YC(-0.2));\r\n        ctx.fillText(`${MAX_Y}`, this.XC(0.1), 10);\r\n    }\r\n\r\n    drawPoint(x, y, value) {\r\n        //  console.log(\"clase: \", value);\r\n        const ctx = this.canvas.getContext(\"2d\");\r\n\r\n        \r\n        ctx.fillStyle = this.clases[value].color;\r\n        \r\n        \r\n        \r\n        \r\n        ctx.fillRect(x - 2, y - 2, 4, 4); //cuadrito\r\n        \r\n        /*if(value === 1){\r\n           \r\n        } else {\r\n            ctx.fillStyle = \"#FF0000\";\r\n            ctx.beginPath(); \r\n            ctx.arc(x-1.25,y-1.25,2.5,0,2*Math.PI);//circulito\r\n            ctx.stroke();\r\n        }*/\r\n    }\r\n\r\n    drawLine(x1, y1, x2, y2, color = \"#000\") {\r\n        x1 = this.XC(x1);\r\n        x2 = this.XC(x2);\r\n        y1 = this.YC(y1);\r\n        y2 = this.YC(y2);\r\n\r\n        const context = this.canvas.getContext(\"2d\");\r\n        context.save();\r\n        context.strokeStyle = color;\r\n        context.beginPath();\r\n        context.moveTo(x1, y1);\r\n        context.lineTo(x2, y2);\r\n        context.stroke();\r\n        context.restore();\r\n    }\r\n    \r\n    drawBarrido(nn) {\r\n\r\n        //console.log(\"clase: \", value);        \r\n        const ctx = this.canvas.getContext(\"2d\");\r\n        var density = 5;\r\n        var cont = 0;\r\n        for (let x = -5; x < 5; x += 0.1) {\r\n            for (let y = -5; y< 5; y += 0.1) {\r\n                \r\n                let mayor = 0;\r\n                let ind = 0;\r\n                let out = nn.predict([x,y]);\r\n                /*if(cont % 100 == 0){\r\n                    console.log(\"out:\" , out);\r\n                }*/\r\n                \r\n                for(let k = 0; k < out.length; k++){\r\n                    if (out[k] > mayor)\r\n                    {\r\n                        mayor = out[k];\r\n                        ind = k;\r\n                    }\r\n                }\r\n                \r\n                ctx.fillStyle = this.clases[ind].color;\r\n                ctx.fillRect(\r\n                    this.XC(x)-1,\r\n                    this.YC(y)-1,\r\n                    2, \r\n                    2,\r\n                )\r\n                // ctx.fillRect(\r\n                //     this.XC(x) - density / 2 - 1, \r\n                //     this.YC(y) - density / 2 - 1, \r\n                //     density + 2, density + 2);\r\n                //cont++;\r\n                \r\n            }\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    \r\n    clearCanvas() {\r\n        const context = this.canvas.getContext(\"2d\");\r\n\r\n        //context.clearRect(0,0, this.widthCanvas, this.heightCanvas);\r\n\r\n        // Store the current transformation matrix\r\n        context.save();\r\n\r\n        // Use the identity matrix while clearing the canvas\r\n        context.setTransform(1, 0, 0, 1, 0, 0);\r\n        context.clearRect(0, 0, this.widthCanvas, this.heightCanvas);\r\n\r\n        // Restore the transform\r\n        context.restore();\r\n    }\r\n}\r\n\r\nexport default CPDrawer;","class BackPropagation {\r\n    constructor(layersCount, layersNeuronsCount, learningRate, maxErrorAllowed, maxEpicNumber, cpDrawer, setPerceptronState){\r\n        console.log(\"data: \",layersCount, layersNeuronsCount, learningRate, maxErrorAllowed, maxEpicNumber)\r\n        this.layers = [];\r\n        this.learningRate = learningRate;\r\n        this.maxErrorAllowed = maxErrorAllowed;\r\n        this.maxEpicNumber = maxEpicNumber;\r\n        this.meanError = [];\r\n        this.initLayers(layersCount, layersNeuronsCount)\r\n        this.cpDrawer = cpDrawer;\r\n        this.setPerceptronState = setPerceptronState\r\n    }\r\n\r\n    initLayers(layersCount, layersNeuronsCount) {\r\n        for (let i = 0; i < layersCount; i++){\r\n            this.layers.push([]);\r\n        }\r\n        this.layers.forEach((layer, index) => {\r\n            for(let i = 0; i < layersNeuronsCount[index]; i++) {\r\n                const count =  index === 0 \r\n                ? 2\r\n                :  this.layers[index-1].length;\r\n                const weights = []\r\n                for (let j = 0; j <= count; j++){\r\n                    weights.push(Math.random() * (5 - (-5)) + (-5));\r\n                }\r\n                layer.push(weights);\r\n            }\r\n        })\r\n    }\r\n\r\n    fit = async (inputs, outputs) => {\r\n        let accumulatedSquareError, meanSquareError, epicNumber = 0;\r\n        meanSquareError = 999999;\r\n        //Detener el algoritmo hasta llegar al error deseado o se alcanza el número máximo de épocas\r\n        while(epicNumber < this.maxEpicNumber && meanSquareError > this.maxErrorAllowed) {\r\n            accumulatedSquareError = 0;\r\n            inputs.forEach((inputData, indexInput) => {\r\n                const { sensitivity, net, a } = this.initFitData();\r\n\r\n                //Obtener salidas de cada capa (forward)\r\n                this.forward(inputData, net, a);\r\n                \r\n                //Calcular el error\r\n                const error = [];\r\n                outputs[indexInput].forEach((output, index) => {\r\n                    error[index] = output - a[a.length-1][index];\r\n                });\r\n                const squareSum = error.reduce((accumulator, value) => {\r\n                    return accumulator + Math.pow(value,2);\r\n                }, 0);\r\n                accumulatedSquareError += Math.sqrt(squareSum);\r\n                \r\n                //Back-propagation (backward)\r\n                this.backward(sensitivity, inputData, net, a, error);\r\n            });\r\n            epicNumber++;\r\n            meanSquareError = accumulatedSquareError / inputs.length;\r\n            this.meanError.push({epoca: \"Ep \"+ parseFloat(epicNumber), error: meanSquareError});\r\n            console.log(\"Epoca\", epicNumber);\r\n            console.log(\"Error\", meanSquareError);\r\n            // console.log(\"Error mínimo\", this.maxErrorAllowed);\r\n            // console.log(\"pesos\", this.layers)\r\n            if(epicNumber % 25 === 0){\r\n                await this.drawCanvas(inputs, outputs);\r\n            }\r\n        }\r\n        this.setPerceptronState(state => {\r\n            return {\r\n                ...state,\r\n                meanError: this.meanError\r\n            }\r\n        });\r\n    }\r\n    \r\n    forward = (inputData, net, a) => {\r\n        this.layers.forEach((layer, indexLayer) => {\r\n            layer.forEach((neuron, indexNeuron) => {\r\n                const input = (indexLayer === 0) ? inputData : a[indexLayer - 1];\r\n                net[indexLayer][indexNeuron] = -neuron[0];\r\n                for (let i = 0; i < input.length; i++) {\r\n                    net[indexLayer][indexNeuron] += neuron[i+1] * input[i];\r\n                }\r\n                a[indexLayer][indexNeuron] = this.f(net[indexLayer][indexNeuron]);\r\n            });\r\n        });\r\n    }\r\n    \r\n    backward = (sensitivity, inputData, net, a, error) => {\r\n        //Calcular sensibilidades\r\n        this.calculateSensitivities(sensitivity, net, error);\r\n        //Adaptar pesos\r\n        this.weightsUpdate(sensitivity, inputData, a);\r\n    }\r\n\r\n    calculateSensitivities = (sensitivity, net, error) => {\r\n        for(let i = this.layers.length-1; i >=0; i--) {\r\n            if (i === this.layers.length-1) { //adaline neuronas de salida ultima capa\r\n                this.layers[i].forEach((neuron, j) => {\r\n                    sensitivity[i][j] = -2 * this.fp(net[i][j]) * error[j];\r\n                });\r\n            } else { //Se calcula la sensibilidad con base en la sensibilidad de la capa siguiente\r\n                this.layers[i].forEach((neuron, j) => {\r\n                    let sum = 0;\r\n                    this.layers[i+1].forEach((neuron, k) => {\r\n                        sum += this.fp(net[i][j]) * neuron[j+1] * sensitivity[i+1][k];\r\n                    });\r\n                    sensitivity[i][j] = sum;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    weightsUpdate = (sensitivity, inputData, a) => {\r\n        for(let i = this.layers.length-1; i >=0; i--) { //Recorrer capas\r\n            const inputTemp = (i === 0) ? inputData : a[i-1];\r\n            const input = JSON.parse(JSON.stringify(inputTemp));\r\n            input.unshift(-1);\r\n\r\n            this.layers[i].forEach((neuron, index) => { //Recorrer neuronas\r\n                neuron.forEach((weight, j) => {\r\n                    neuron[j] = weight - (this.learningRate * sensitivity[i][index] * input[j]);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    initFitData = () => {\r\n        const sensitivity =[];\r\n        const net = [];\r\n        const a = [];\r\n        for (let i = 0; i < this.layers.length; i++) { //Capa\r\n            sensitivity.push([]);\r\n            net.push([]);\r\n            a.push([]);\r\n        }\r\n        return { sensitivity, net, a };\r\n    }\r\n\r\n    f = (y) =>{\r\n        const ye = y * -1; \r\n        return  1/(1+(Math.pow(Math.E, ye)));\r\n    }\r\n\r\n    fp = (y) => {\r\n        //Derivada en términos de f(y), para la función log-sig solamente\r\n        return this.f(y) * (1-this.f(y));\r\n    }\r\n\r\n    calcularX2 = (w, x1) =>{\r\n        return  ((-w[1] *  x1) + w[0] )/ w[2];\r\n    }\r\n\r\n    transferencia = (inputs) => {\r\n    }\r\n\r\n    //Para las clases una vez este entrenado\r\n    predict = (inputs) => {\r\n        const { a, net } = this.initFitData();\r\n        this.layers.forEach((layer, indexLayer) => {\r\n            layer.forEach((neuron, indexNeuron) => {\r\n                const input = (indexLayer === 0) ? inputs : a[indexLayer - 1];\r\n                net[indexLayer][indexNeuron] = -neuron[0];\r\n                for (let i = 0; i < input.length; i++) {\r\n                    net[indexLayer][indexNeuron] += neuron[i+1] * input[i];\r\n                }\r\n                a[indexLayer][indexNeuron] = this.f(net[indexLayer][indexNeuron]);\r\n            });\r\n        });\r\n        return a[a.length-1];\r\n    }\r\n\r\n    async drawCanvas(inputs, outputs) {\r\n        this.cpDrawer.clearCanvas();\r\n        this.cpDrawer.drawBarrido(this);\r\n        this.cpDrawer.drawAxis();\r\n            inputs.forEach ((point, index) => {\r\n                let output = outputs[index].indexOf(1);\r\n                this.cpDrawer.drawPoint(this.cpDrawer.XC(point[0]), this.cpDrawer.YC(point[1]), output);\r\n            });\r\n            this.setPerceptronState(state => {\r\n            return {\r\n                ...state,\r\n                meanError: this.meanError\r\n            }\r\n        });\r\n        await new Promise(r => setTimeout(r, 10));\r\n    }\r\n}\r\n\r\nexport default BackPropagation;\r\n\r\n// [\r\n//     [               //capa\r\n//         [1, 2, 5 ],\r\n//         [1, 2, 3 ]\r\n//     ],\r\n//     [],\r\n//     []\r\n// ]","import React, { useContext, useState } from \"react\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { Button, FormControlLabel, Radio, RadioGroup, TextField, FormLabel,FormControl} from '@material-ui/core';\r\nimport { PerceptronContext } from \"./PerceptronContext.js\";\r\n// import Adaline from '../algoritmos/Adaline.js';\r\nimport BackPropagation from '../algoritmos/BackPropagationV2.js';\r\n\r\n\r\nconst numCapas = [\r\n    {\r\n        label: \"1\",\r\n        value: \"unacapa\"\r\n    },\r\n    {\r\n        label: \"2\",\r\n        value: \"doscapas\"\r\n    }\r\n]\r\nlet clases = [];\r\n\r\n\r\n\r\nconst PerceptronConfigs = (props) => {\r\n   \r\n    const { handleSubmit, register, errors, control, watch, getValues } = useForm(\r\n        {\r\n            defaultValues: {\r\n                learning_rate: 0.1,\r\n                max_error: 0.01,\r\n                max_epic_number: 5000\r\n            }\r\n        }\r\n    );\r\n    const { perceptronState, setPerceptronState } = useContext(PerceptronContext);\r\n    const [perceptronErrors, setPerceptronErrors] = useState({});\r\n    const [iniciado, setIniciado] = useState(false);\r\n    const [initConf, setInitConf] = useState({});\r\n    const [claseSelect, setClaseSelect] = useState(\"1\");\r\n\r\n    const type = watch(\"type\");\r\n\r\n    const cambiarClase = (event) => {\r\n        console.log(\"cambio clase\");\r\n        console.log(event.target.value);\r\n        setClaseSelect(event.target.value);\r\n        setPerceptronState({\r\n            ...perceptronState,\r\n           claseSelect: event.target.value\r\n        });\r\n    }\r\n    const iniciar = async (values) => {\r\n        console.log(values);\r\n        if (values.type === 'unacapa') {\r\n            setInitConf({\r\n                num_class: values.max_class,\r\n                num_capas: 3,\r\n                num_n_capa1: values.max_capa1\r\n            });\r\n        } else {\r\n            setInitConf({\r\n                num_class: values.max_class,\r\n                num_capas: 4,\r\n                num_n_capa1: values.max_capa1,\r\n                num_n_capa2: values.max_capa2\r\n            });\r\n        }\r\n\r\n        for (let i = 1; i <= values.max_class; i++) {\r\n            clases.push({\r\n                label: \"clase\" + i,\r\n                color: randomColor(),\r\n                value: \"\" + i\r\n            })\r\n        }\r\n        setPerceptronState({\r\n            ...perceptronState,\r\n            clases: clases,\r\n            iniciado: true\r\n        });\r\n        setIniciado(true);\r\n    }\r\n\r\n    const randomColor = () => {\r\n        const hexadecimal = new Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\");\r\n        let color_aleatorio = \"#\";\r\n        for (let i = 0; i < 6; i++) {\r\n            let posarray = aleatorio(0, hexadecimal.length);\r\n            color_aleatorio += hexadecimal[posarray];\r\n        }\r\n        return color_aleatorio;\r\n    }\r\n\r\n    const changeColor = (event, index) => {\r\n        const { clases } = perceptronState;\r\n        clases[index].color = event.target.value;\r\n        setPerceptronState({\r\n            ...perceptronState,\r\n            clases\r\n        })\r\n    }\r\n\r\n    const aleatorio = (inferior, superior) => {\r\n        const numPosibilidades = superior - inferior;\r\n        let aleat = Math.random() * numPosibilidades\r\n        aleat = Math.floor(aleat)\r\n        return parseInt(inferior) + aleat\r\n    }\r\n\r\n    const iniciarPesos = async (values) => {\r\n                    \r\n        \r\n        setPerceptronErrors({});\r\n        if (!perceptronState?.x?.length) {\r\n            setPerceptronErrors({\r\n                trainingSet: {\r\n                    message: \"Agregue datos de entrenamiento\"\r\n                }\r\n            });\r\n            return;\r\n        }\r\n \r\n        const neuronsPerLayer = [2, initConf.num_n_capa1];\r\n        if (initConf.num_capas === 4) {\r\n            neuronsPerLayer.push(initConf.num_n_capa2);\r\n        }\r\n        neuronsPerLayer.push(initConf.num_class);\r\n        const backP = new BackPropagation(\r\n            initConf.num_capas,\r\n            neuronsPerLayer,\r\n            values.learning_rate,\r\n            values.max_error,\r\n            values.max_epic_number,\r\n            perceptronState.cpDrawer,\r\n            setPerceptronState\r\n        );\r\n\r\n        setPerceptronState({\r\n            ...perceptronState,\r\n            perceptron: backP,\r\n        });\r\n        perceptronState.cpDrawer.drawBarrido(backP);    \r\n        console.log(backP.layers);\r\n\r\n    }\r\n\r\n\r\n    const entrenar = async () => {\r\n       \r\n        setPerceptronErrors({});\r\n        if (!perceptronState.perceptron) {\r\n            setPerceptronErrors({\r\n                \"trainedPerceptron\": {\r\n                    message: \"Debes inicializar la red\"\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        await perceptronState.perceptron.fit(perceptronState.x, perceptronState.y);\r\n        const xd = perceptronState.perceptron.meanError.length >= perceptronState.perceptron.iterations;\r\n        setPerceptronState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                entrenado: true,\r\n                limiteAlcanzado: xd\r\n            }\r\n        });\r\n        //perceptronState.cpDrawer.drawBarrido(perceptronState.perceptron);    \r\n         \r\n    }\r\n\r\n\r\n    const reiniciar = () => {\r\n        perceptronState.cpDrawer.clearCanvas();\r\n        perceptronState.cpDrawer.drawAxis();\r\n        setPerceptronState({\r\n            ...perceptronState,\r\n            perceptron: null,\r\n            entrenado: false,\r\n            x: [],\r\n            y: [],\r\n            meanError: []\r\n        });\r\n    }\r\n\r\n\r\n    if (iniciado) {\r\n        return (\r\n            <>\r\n                \r\n                <Form onSubmit={handleSubmit(iniciarPesos)} className=\"\">\r\n                    \r\n                    <Controller\r\n                        as={TextField}\r\n                        name=\"learning_rate\"\r\n                        control={control}\r\n                        id=\"learning_rate\"\r\n                        name=\"learning_rate\"\r\n                        label=\"Nivel de aprendizaje\"\r\n                        rules={{\r\n                            required: \"Este campo es requerido\",\r\n                            validate: value => (parseFloat(value, 10) > 0 && parseFloat(value, 10) <= 1) || \"El valor debe ser entre 0 y 1\",\r\n                        }}\r\n                        helperText={errors?.learning_rate?.message}\r\n                        error={!!errors?.learning_rate}\r\n                        margin=\"normal\"\r\n                        className=\"mt-2\"\r\n                    />\r\n                    <br />\r\n                    <Controller\r\n                        as={TextField}\r\n                        name=\"max_epic_number\"\r\n                        control={control}\r\n                        id=\"max_epic_number\"\r\n                        name=\"max_epic_number\"\r\n                        label=\"Número máximo de épocas\"\r\n                        rules={{ required: \"Este campo es requerido\" }}\r\n                        helperText={errors?.max_epic_number?.message}\r\n                        error={!!errors?.max_epic_number}\r\n                        margin=\"normal\"\r\n                    />\r\n                    <br />\r\n\r\n                    <Controller\r\n                        as={TextField}\r\n                        name=\"max_error\"\r\n                        control={control}\r\n                        id=\"max_error\"\r\n                        name=\"max_error\"\r\n                        label=\"Error\"\r\n                        rules={{ required: \"Este campo es requerido\" }}\r\n                        helperText={errors?.max_error?.message}\r\n                        error={!!errors?.max_error}\r\n                        margin=\"normal\"\r\n                    />\r\n                    <p></p>\r\n                    <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Clases</FormLabel>\r\n\r\n                        <RadioGroup aria-label=\"clases\" name=\"clases\" value={claseSelect} onChange={cambiarClase}>\r\n                        {\r\n                            clases.map((type, index) =>\r\n                                <>\r\n                                    <FormControlLabel\r\n                                        value={type.value}\r\n                                        key={index}\r\n                                        control={\r\n                                            <Radio\r\n                                                size=\"small\"\r\n                                                style={{ color: type.color }}\r\n                                            />\r\n                                        }\r\n                                        label={\r\n                                            <span style={{ fontSize: \"12pt\" }}>\r\n                                                {type.label}\r\n                                            </span>\r\n                                        }\r\n                                    />\r\n                                    <input\r\n                                        type=\"color\"\r\n                                        value={type.color}\r\n                                        onChange={(e) => changeColor(e, index)}\r\n                                    />\r\n                                </>\r\n                            )\r\n                        }\r\n                    \r\n                        </RadioGroup>\r\n                    </FormControl>\r\n\r\n                    {\r\n                        perceptronErrors.trainingSet &&\r\n                        <span className=\"error\">{perceptronErrors.trainingSet.message}</span>\r\n                    }\r\n\r\n                    {\r\n                        perceptronErrors.trainedPerceptron &&\r\n                        <span className=\"error\">{perceptronErrors.trainedPerceptron.message}</span>\r\n                    }\r\n\r\n                    <Button className=\"mt-4\" type=\"sumbit\" fullWidth color=\"primary\" style={{ color: \"#03A9F4\" }}>  Inicializar </Button>\r\n\r\n                </Form>\r\n                <Form onSubmit={handleSubmit(entrenar)} className=\"\">\r\n                    <Button className=\"mt-4\" type=\"sumbit\" fullWidth color=\"primary\" style={{ color: \"#03A9F4\" }}>Entrenar</Button>\r\n                </Form>\r\n\r\n                <Form onSubmit={handleSubmit(reiniciar)} className=\"\">\r\n                    <Button className=\"mt-4\" type=\"sumbit\" fullWidth color=\"primary\" style={{ color: \"#03A9F4\" }}>Reiniciar</Button>\r\n                </Form>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <Form onSubmit={handleSubmit(iniciar)} className=\"\">\r\n                    <Controller\r\n                        defaultValue={3}\r\n                        as={TextField}\r\n                        name=\"max_class\"\r\n                        control={control}\r\n                        id=\"max_class\"\r\n                        name=\"max_class\"\r\n                        label=\"Numero de clases\"\r\n                        rules={{ required: \"Este campo es requerido\" }}\r\n                        helperText={errors?.max_error?.message}\r\n                        error={!!errors?.max_error}\r\n                        margin=\"normal\"\r\n                    />\r\n\r\n                    <p></p>\r\n                    <span className=\"\">{\"Numero de capas ocultas\"}</span>\r\n                    <Controller\r\n                        defaultValue={\"unacapa\"}\r\n                        as={RadioGroup}\r\n                        name=\"type\"\r\n                        control={control}\r\n                        id=\"type\"\r\n                        name=\"type\"\r\n                        rules={{ required: \"Este campo es requerido\" }}\r\n                        helperText={errors?.type?.message}\r\n                        error={!!errors?.type}\r\n                        margin=\"normal\"\r\n                    >\r\n                        {\r\n                            numCapas.map((type, index) =>\r\n                                <FormControlLabel\r\n                                    value={type.value}\r\n                                    key={index}\r\n                                    control={\r\n                                        <Radio\r\n                                            size=\"small\"\r\n                                            style={{ color: \"#03a9f4\" }}\r\n                                        />\r\n                                    }\r\n                                    label={\r\n                                        <span style={{ fontSize: \"12pt\" }}>\r\n                                            {type.label}\r\n                                        </span>\r\n                                    }\r\n                                />\r\n                            )\r\n                        }\r\n                    </Controller>\r\n\r\n\r\n                    <Controller\r\n                        defaultValue={5}\r\n                        as={TextField}\r\n                        name=\"max_capa1\"\r\n                        control={control}\r\n                        id=\"max_capa1\"\r\n                        name=\"max_capa1\"\r\n                        label=\"Neuronas en la capa 1\"\r\n                        rules={{ required: \"Este campo es requerido\" }}\r\n                        helperText={errors?.max_error?.message}\r\n                        error={!!errors?.max_error}\r\n                        margin=\"normal\"\r\n                    />\r\n\r\n\r\n                    {\r\n                        type == 'doscapas' &&\r\n                        <Controller\r\n                            defaultValue={5}\r\n                            as={TextField}\r\n                            name=\"max_capa2\"\r\n                            control={control}\r\n                            id=\"max_capa2\"\r\n                            name=\"max_capa2\"\r\n                            label=\"Neuronas en la capa 2\"\r\n                            rules={{ required: \"Este campo es requerido\" }}\r\n                            helperText={errors?.max_error?.message}\r\n                            error={!!errors?.max_error}\r\n                            margin=\"normal\"\r\n                        />\r\n\r\n                    }\r\n\r\n\r\n                    <Button\r\n                        className=\"mt-4\"\r\n                        type=\"sumbit\"\r\n                        fullWidth color=\"primary\"\r\n                        style={{ color: \"#03A9F4\" }}\r\n                        onSubmit\r\n                    >Continuar</Button>\r\n                </Form>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default PerceptronConfigs;","import React,{useContext, useEffect, useState } from \"react\";\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer,  } from 'recharts';\r\nimport { PerceptronContext } from \"./PerceptronContext\";\r\n\r\nconst MAX_ELEMENTS_TO_SHOW = 50;\r\n\r\nconst ErrorChart = (props) =>  {\r\n    const {perceptronState} = useContext(PerceptronContext);\r\n    let [dataToShow, setDataToShow] = useState([]);\r\n    let [itemsViewed, setItemsViewed] = useState(0);\r\n    let [infoGrouped, setInfoGrouped] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n      const tempInfoGrouped = groupElements(perceptronState.meanError)\r\n      setInfoGrouped(tempInfoGrouped);\r\n      let firstDataToShow = groupElements(perceptronState.meanError);\r\n      setDataToShow(firstDataToShow[firstDataToShow.length > 1 ? firstDataToShow.length-2 : 0].data);\r\n      setItemsViewed(tempInfoGrouped.length);\r\n    }, [perceptronState.meanError.length]);\r\n\r\n    /*const getHarcodedInfo = () => {\r\n      let data = [];\r\n      for(let i = 0; i < 33; i++){\r\n        data.push({'epoca': i+1, 'error': Math.floor(Math.random() * (20 - 1)) + 1})\r\n      }\r\n      return data;\r\n    }*/\r\n\r\n    const groupElements = (data) => {\r\n      let infoGrouped = [{'index': 0, 'data': []}],\r\n        objectIndex = 0,\r\n        insertedElements = 1;\r\n      for(let i = 0; i < data.length; i++){\r\n        if(insertedElements == MAX_ELEMENTS_TO_SHOW){\r\n          infoGrouped[objectIndex].data.push(data[i])\r\n          objectIndex++;\r\n          infoGrouped.push({'index': objectIndex, 'data': []})\r\n          insertedElements = 1;\r\n          continue\r\n        } else {\r\n          infoGrouped[objectIndex].data.push(data[i])\r\n        }\r\n\r\n        insertedElements++;\r\n      }\r\n      return infoGrouped;\r\n    }\r\n\r\n    const nextData = () => {\r\n      setItemsViewed(itemsViewed == infoGrouped.length ? infoGrouped.length: ++itemsViewed)\r\n      if(itemsViewed < infoGrouped.length){\r\n        setDataToShow(infoGrouped[itemsViewed].data);\r\n      }\r\n    }\r\n\r\n    const afterData = () => {\r\n      setItemsViewed(itemsViewed == 0 ? 0: --itemsViewed)\r\n      if(itemsViewed < infoGrouped.length){\r\n        setDataToShow(infoGrouped[itemsViewed].data);\r\n      }\r\n    }\r\n\r\n    return <>\r\n        <Button onClick={() => afterData()} className=\"m-4\"  variant=\"contained\" color=\"primary\">Anteriores {MAX_ELEMENTS_TO_SHOW}</Button>\r\n        <Button  onClick={() => nextData()} className=\"m-4\"  variant=\"contained\" color=\"primary\">Siguientes {MAX_ELEMENTS_TO_SHOW}</Button>\r\n        <br></br>\r\n        <span>Mostrando un total de {perceptronState.meanError.length}</span>\r\n        <ResponsiveContainer>\r\n          <LineChart \r\n            //data={perceptronState.meanError} \r\n            data={dataToShow}\r\n            margin={{\r\n              top: 5, right: 30, left: 20, bottom: 5,\r\n            }}\r\n          >\r\n            <Line type=\"monotone\" dataKey=\"error\" stroke=\"#1976d2\" activeDot={{ r: 8 }}/>\r\n            <CartesianGrid stroke=\"#ccc\" />\r\n            <XAxis dataKey=\"epoca\" interval={0} angle={60} dx={20}/>\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n    </>\r\n}\r\n\r\nexport default ErrorChart;","import React, {useContext} from 'react';\r\nimport { PerceptronContext } from \"./PerceptronContext.js\";\r\n\r\n\r\nconst Alert = (props) => {\r\n    const {perceptronState} = useContext(PerceptronContext);\r\n    const { meanError } = perceptronState.perceptron;\r\n    console.log(\"alert limite: \", perceptronState.limiteAlcanzado);\r\n    return <>\r\n        {\r\n            !perceptronState.limiteAlcanzado &&\r\n            <div>\r\n                <span className=\"error\">{\"Entrenamiento finalizado\"}</span>\r\n            </div>\r\n        }\r\n        <div>\r\n            <span className=\"error\">{`Número de epocas: ${meanError.length}`}</span>\r\n        </div>\r\n        <div>\r\n            <span className=\"error\">{`Error alcanzado: ${meanError[meanError.length-1].error}`}</span>\r\n        </div>\r\n        {\r\n            perceptronState.limiteAlcanzado &&\r\n            <div>\r\n                <span className=\"error\">{\"No se encontró un hiperplano que los separe\"}</span>\r\n            </div>\r\n        }\r\n    </>\r\n}\r\n\r\n\r\nexport default Alert;","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { PerceptronContext } from \"./PerceptronContext\";\r\nimport ForceGraph3D from '3d-force-graph';\r\n\r\nconst NN2 = (props) => {\r\n  const { perceptronState, setPerceptronState } = useContext(PerceptronContext);\r\n\r\n  var myGraph = ForceGraph3D();\r\n\r\n  let data = new Object();\r\n  let nodes = [];\r\n  let links = [];\r\n\r\n  const gData = {\r\n    nodes: [\r\n      /* {\r\n         id: \"id1\",\r\n         name: \"name1\",\r\n         val: 1,\r\n         group: 1\r\n       },  */\r\n      { id: \"N1C1\", group: 1, val: 10 },\r\n      { id: \"N2C1\", group: 1, val: 10 },\r\n      { id: \"N1C2\", group: 2, val: 3 },\r\n      { id: \"N2C2\", group: 2, val: 3 },\r\n      { id: \"N3C2\", group: 2, val: 3 },\r\n      { id: \"N4C2\", group: 2, val: 3 },\r\n      { id: \"N5C2\", group: 2, val: 3 },\r\n      { id: \"N1C3\", group: 3, val: 7 },\r\n      { id: \"N2C3\", group: 3, val: 7 },\r\n      { id: \"N3C3\", group: 3, val: 7 },\r\n    ],\r\n    links: [\r\n      { source: \"N1C1\", target: \"N1C2\", value: 3 },\r\n      { source: \"N2C1\", target: \"N1C2\", value: 3 },\r\n      { source: \"N1C1\", target: \"N2C2\", value: 3 },\r\n      { source: \"N2C1\", target: \"N2C2\", value: 3 },\r\n      { source: \"N1C1\", target: \"N3C2\", value: 3 },\r\n      { source: \"N2C1\", target: \"N3C2\", value: 3 },\r\n      { source: \"N1C1\", target: \"N4C2\", value: 3 },\r\n      { source: \"N2C1\", target: \"N4C2\", value: 3 },\r\n      { source: \"N1C1\", target: \"N5C2\", value: 3 },\r\n      { source: \"N2C1\", target: \"N5C2\", value: 3 },\r\n\r\n\r\n      { source: \"N1C2\", target: \"N1C3\", value: 5 },\r\n      { source: \"N1C2\", target: \"N2C3\", value: 5 },\r\n      { source: \"N1C2\", target: \"N3C3\", value: 5 },\r\n\r\n      { source: \"N2C2\", target: \"N1C3\", value: 5 },\r\n      { source: \"N2C2\", target: \"N2C3\", value: 5 },\r\n      { source: \"N2C2\", target: \"N3C3\", value: 5 },\r\n      { source: \"N3C2\", target: \"N1C3\", value: 5 },\r\n      { source: \"N3C2\", target: \"N2C3\", value: 5 },\r\n      { source: \"N3C2\", target: \"N3C3\", value: 5 },\r\n      { source: \"N4C2\", target: \"N1C3\", value: 5 },\r\n      { source: \"N4C2\", target: \"N2C3\", value: 5 },\r\n      { source: \"N4C2\", target: \"N3C3\", value: 5 },\r\n      { source: \"N5C2\", target: \"N1C3\", value: 5 },\r\n      { source: \"N5C2\", target: \"N2C3\", value: 5 },\r\n      { source: \"N5C2\", target: \"N3C3\", value: 5 },\r\n\r\n\r\n\r\n    ]\r\n  }\r\n\r\n  console.log(perceptronState.perceptron.layers);\r\n  let numCapas = perceptronState.perceptron.layers.length;\r\n  perceptronState.perceptron.layers.forEach((layer, index) => {\r\n    let numCapa = index;\r\n\r\n    layer.forEach((neuron, index2) => {\r\n      let id = \"N\" + (index2 + 1) + \"C\" + (index + 1);\r\n      let numNeuXCapa = neuron.length;\r\n      let numNeu = index2;\r\n\r\n      nodes.push({\r\n        id: id,\r\n        n: numNeu,\r\n        group: numCapa + 1,\r\n        val: 10,\r\n        weight: neuron\r\n      });\r\n    });//neuronas\r\n\r\n\r\n  });//capa\r\n\r\n  \r\n //Links\r\n  for(let capa = 1; capa < perceptronState.perceptron.layers.length; capa++){\r\n    for (let i = 0; i < nodes.length; i++) {        \r\n      if (nodes[i].group === capa){\r\n        for (let j = 1; j < nodes[i].weight.length; j++) {\r\n          links.push({\r\n            source: nodes[i].id,\r\n            target: \"N\" + (j) + \"C\" + (capa+1),\r\n            value: nodes[i].weight[j],\r\n            weigth: nodes[i].weight[j]\r\n          })\r\n        }    \r\n        \r\n      }\r\n\r\n\r\n    }\r\n\r\n  }\r\n  data['nodes'] = nodes;\r\n  data['links'] = links;\r\n\r\n  console.log(nodes);\r\n\r\n  const xd = 3;\r\n  useEffect(() => {\r\n\r\n    myGraph(document.getElementById('linechart'))\r\n      .graphData(data)\r\n      .nodeLabel('id')\r\n      .linkLabel('weigth')\r\n      //.linkWidth(1)\r\n      .nodeAutoColorBy('group')\r\n      .linkDirectionalParticles(\"value\")\r\n      .linkDirectionalParticleSpeed(d => d.value * 0.001);\r\n  }, [])\r\n\r\n  return (\r\n    <div id=\"linechart\">\r\n    </div>\r\n  )\r\n\r\n\r\n}\r\nexport default NN2;","import React, { useContext, useState, Component } from \"react\";\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nimport CartesianPlane from '../components/CartesianPlane';\r\nimport PerceptronConfigs from '../components/PerceptronConfigs';\r\nimport ErrorChart from '../components/ErrorChart';\r\nimport { PerceptronContext } from \"../components/PerceptronContext\";\r\nimport Alert from '../components/Alert.js';\r\nimport NN from '../components/NN';\r\n\r\n\r\nconst Perceptron = (props) => {\r\n    const {perceptronState} = useContext(PerceptronContext);\r\n    const meanError = perceptronState?.perceptron?.meanError;\r\n    return <>\r\n        <Container fluid>\r\n            <Row>\r\n                <Col\r\n                    md={{ span: 7 }}\r\n                    sm={{ span: 12 }}\r\n                >\r\n                    <div className=\"card card--box\">\r\n                        <div className=\"card__header\">\r\n                            Plano cartesiano\r\n                        </div>\r\n                        {\r\n                            perceptronState.iniciado &&\r\n                            <CartesianPlane />\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                <Col\r\n                    md={{ span: 5 }}\r\n                    sm={{ span: 12 }}\r\n                >\r\n                    <div className=\"card card--box\">\r\n                        <div className=\"card__header\">\r\n                            Configuraciones\r\n                        </div>\r\n                        <PerceptronConfigs />\r\n                        \r\n                    </div>\r\n                    {  \r\n                        perceptronState.entrenado &&\r\n                        <Row>\r\n                            <Col\r\n                                md={{ span: 12 }}\r\n                                sm={{ span: 5 }}\r\n                            >\r\n                                <div className=\"card card--box\">\r\n                                    <div style={{ width: '100%', height: \"auto\" }}>\r\n                                        <Alert />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n           \r\n            <Row>\r\n                <Col sm={{span: 12}}>\r\n                    <div className=\"card card--box\">\r\n                        <div className=\"card__header\">\r\n                            Grafica\r\n                        </div>\r\n                        {\r\n                            perceptronState.perceptron &&\r\n                            <div style={{ width: '100%', height: 500, paddingBottom: '11%'}}>\r\n                                {\r\n                                    (!!meanError.length && !perceptronState.entrenado) &&\r\n                                    <>\r\n                                        <div>\r\n                                            <span>{`Número de epoca actual: ${meanError.length}`}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <span>{`Error actual: ${meanError[meanError.length-1].error}`}</span>\r\n                                        </div>\r\n                                    </>\r\n                                }\r\n                                <ErrorChart />\r\n                                {\r\n                                    perceptronState.perceptron.errorAcumulado == 0 &&\r\n                                    <span>No hay información para mostrar</span>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            {\r\n                perceptronState.perceptron != null &&\r\n                <NN />\r\n            }\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default Perceptron;","import React, { useState } from 'react';\r\nimport '../styles/App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport Perceptron from '../pages/Perceptron';\r\nimport {PerceptronContext} from '../components/PerceptronContext';\r\n\r\n\r\nfunction App() { \r\n  const [perceptronState, setPerceptronState] = useState({\r\n    perceptron : null,\r\n    entrenado: false,\r\n    x : [],\r\n    y : [],    \r\n    cpDrawer: null,\r\n    limiteAlcanzado: false, \r\n    claseSelect: \"1\",\r\n    iniciado: false,\r\n    meanError: []\r\n  });\r\n \r\n  return (\r\n    <div className=\"App\">\r\n      <PerceptronContext.Provider value = {{\r\n          perceptronState, \r\n          setPerceptronState\r\n      }}>\r\n        <Header />\r\n\r\n        <Perceptron />\r\n\r\n        <Footer />\r\n      </PerceptronContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js'; \n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}