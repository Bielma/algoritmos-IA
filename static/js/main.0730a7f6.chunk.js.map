{"version":3,"sources":["components/CartesianPlane.js","components/Header.js","components/Footer.js","components/PerceptronContext.js","utils/CPDrawer.js","algoritmos/Perceptron.js","components/CsvReader.js","components/PerceptronConfigs.js","components/ErrorChart.js","components/Alert.js","pages/Perceptron.js","components/App.js","serviceWorker.js","index.js"],"names":["cpDrawer","Header","props","className","role","id","alt","xmlns","width","height","viewBox","data-name","transform","cx","cy","r","fill","d","Footer","PerceptronContext","createContext","CPDrawer","canvas","this","widthCanvas","heightCanvas","x","y","ctx","getContext","cty","beginPath","moveTo","lineTo","stroke","font","fillStyle","i","fillText","XC","YC","value","getBoundingClientRect","fillRect","arc","Math","PI","x1","y1","x2","y2","color","context","save","strokeStyle","restore","setTransform","clearRect","CartesianPlane","useContext","perceptronState","setPerceptronState","canvasRef","useRef","useEffect","current","style","drawAxis","handleClick","event","preventDefault","entrenado","rect","physicalXCoordinate","clientX","left","physicalYCoordinate","clientY","top","logicalXCoordinate","XL","logicalYCoordinate","YL","type","drawPoint","perceptron","predict","border","onClick","onContextMenu","ref","Perceptron","size","lr","it","cp","sj","fit","inputs","outputs","a","done","epoca","sumaError","console","log","j","length","error","w","learningRate","k","calcularX2","MaxAxis","estado","clearCanvas","forEach","point","index","drawLine","Promise","setTimeout","errorAcumulado","push","parseInt","iterations","suma","parseFloat","random","CsvReader","onFileLoaded","data","fileInfo","csvLeido","agregarPuntos","PerceptronConfigs","useForm","handleSubmit","errors","register","control","useState","perceptronErrors","setPerceptronErrors","iniciarPesos","values","trainingSet","message","learning_rate","max_epic_number","entrenar","xd","limiteAlcanzado","Form","onSubmit","as","TextField","name","required","validate","defaultValue","trainedPerceptron","Button","fullWidth","ErrorChart","dataToShow","setDataToShow","itemsViewed","setItemsViewed","infoGrouped","setInfoGrouped","groupElements","firstDataToShow","objectIndex","insertedElements","variant","margin","right","bottom","dataKey","activeDot","interval","angle","dx","Alert","Container","fluid","Row","Col","md","span","sm","paddingBottom","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0730a7f6.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState, useContext} from \"react\";\r\nimport { PerceptronContext } from \"./PerceptronContext\";\r\nimport CPDrawer from \"../utils/CPDrawer\";\r\n\r\nlet cpDrawer;\r\n\r\nconst CartesianPlane = (props) => {\r\n    //const [trainingSet, setTrainingSet] = useState([]);\r\n    const {perceptronState, setPerceptronState} = useContext(PerceptronContext);\r\n\r\n    const canvasRef = useRef(null)\r\n    \r\n    useEffect(() => {\r\n        canvasRef.current.style.width = \"auto\";\r\n        cpDrawer = new CPDrawer(canvasRef.current)\r\n        setPerceptronState({\r\n            ...perceptronState,\r\n            cpDrawer: cpDrawer\r\n        })\r\n\r\n        cpDrawer.drawAxis();\r\n        \r\n    }, [])\r\n    \r\n    \r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        const entrenado = perceptronState.entrenado;\r\n        const canvas = canvasRef.current,\r\n            rect = canvas.getBoundingClientRect(),\r\n            physicalXCoordinate = event.clientX - rect.left,\r\n            physicalYCoordinate = event.clientY - rect.top,\r\n            logicalXCoordinate = cpDrawer.XL(physicalXCoordinate),\r\n            logicalYCoordinate = cpDrawer.YL(physicalYCoordinate),\r\n            value = event.type === \"click\" ? 1 : 0;\r\n\r\n        if(!entrenado){\r\n            cpDrawer.drawPoint(physicalXCoordinate, physicalYCoordinate, value);\r\n            setPerceptronState({            \r\n                ...perceptronState,\r\n                x: [\r\n                    ...perceptronState.x,\r\n                    [\r\n                        logicalXCoordinate,\r\n                        logicalYCoordinate\r\n                    ]\r\n                ],\r\n                y: [\r\n                    ...perceptronState.y,\r\n                    value\r\n                ]\r\n            });\r\n        }else{\r\n            cpDrawer.drawPoint(\r\n                physicalXCoordinate, \r\n                physicalYCoordinate, \r\n                perceptronState.perceptron.predict([\r\n                    logicalXCoordinate, \r\n                    logicalYCoordinate                                        \r\n                ]));\r\n        }\r\n        \r\n\r\n        \r\n    }\r\n\r\n    return <>\r\n        <canvas\r\n            id=\"cartesian_plane\"\r\n            style={{border: \"1px solid #d1d1d1\"}}\r\n            onClick={handleClick}\r\n            onContextMenu={handleClick}\r\n            width={500}\r\n            height={500}\r\n            ref={canvasRef}\r\n        ></canvas>\r\n    </>\r\n}\r\n\r\nexport default CartesianPlane;","import React from \"react\";\r\nimport '../styles/Header.css';\r\n\r\nconst Header = (props) =>  {\r\n    return <>\r\n\r\n        <div className=\"toolbar\" role=\"banner\"></div>\r\n\r\n        <div className=\"content\">\r\n            <div className=\"card highlight-card card-small\">\r\n            <svg id=\"rocket\" alt=\"Rocket Ship\" xmlns=\"http://www.w3.org/2000/svg\" width=\"101.678\" height=\"101.678\" viewBox=\"0 0 101.678 101.678\">\r\n            <g id=\"Group_83\" data-name=\"Group 83\" transform=\"translate(-141 -696)\">\r\n                <circle id=\"Ellipse_8\" data-name=\"Ellipse 8\" cx=\"50.839\" cy=\"50.839\" r=\"50.839\" transform=\"translate(141 696)\" fill=\"#dd0031\"/>\r\n                <g id=\"Group_47\" data-name=\"Group 47\" transform=\"translate(165.185 720.185)\">\r\n                <path id=\"Path_33\" data-name=\"Path 33\" d=\"M3.4,42.615a3.084,3.084,0,0,0,3.553,3.553,21.419,21.419,0,0,0,12.215-6.107L9.511,30.4A21.419,21.419,0,0,0,3.4,42.615Z\" transform=\"translate(0.371 3.363)\" fill=\"#fff\"/>\r\n                <path id=\"Path_34\" data-name=\"Path 34\" d=\"M53.3,3.221A3.09,3.09,0,0,0,50.081,0,48.227,48.227,0,0,0,18.322,13.437c-6-1.666-14.991-1.221-18.322,7.218A33.892,33.892,0,0,1,9.439,25.1l-.333.666a3.013,3.013,0,0,0,.555,3.553L23.985,43.641a2.9,2.9,0,0,0,3.553.555l.666-.333A33.892,33.892,0,0,1,32.647,53.3c8.55-3.664,8.884-12.326,7.218-18.322A48.227,48.227,0,0,0,53.3,3.221ZM34.424,9.772a6.439,6.439,0,1,1,9.106,9.106,6.368,6.368,0,0,1-9.106,0A6.467,6.467,0,0,1,34.424,9.772Z\" transform=\"translate(0 0.005)\" fill=\"#fff\"/>\r\n                </g>\r\n            </g>\r\n            </svg>\r\n                <span>Inteligencia Artificial 2 - Perceptrón</span>\r\n                <svg id=\"rocket-smoke\" alt=\"Rocket Ship Smoke\" xmlns=\"http://www.w3.org/2000/svg\" width=\"516.119\" height=\"1083.632\" viewBox=\"0 0 516.119 1083.632\">\r\n                <path id=\"Path_40\" data-name=\"Path 40\" d=\"M644.6,141S143.02,215.537,147.049,870.207s342.774,201.755,342.774,201.755S404.659,847.213,388.815,762.2c-27.116-145.51-11.551-384.124,271.9-609.1C671.15,139.365,644.6,141,644.6,141Z\" transform=\"translate(-147.025 -140.939)\" fill=\"#f5f5f5\"/>\r\n            </svg>\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Footer = (props) =>  {\r\n\r\n    return <>\r\n        <svg id=\"clouds\" alt=\"Gray Clouds Background\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2611.084\" height=\"485.677\" viewBox=\"0 0 2611.084 485.677\">\r\n            <path id=\"Path_39\" data-name=\"Path 39\" d=\"M2379.709,863.793c10-93-77-171-168-149-52-114-225-105-264,15-75,3-140,59-152,133-30,2.83-66.725,9.829-93.5,26.25-26.771-16.421-63.5-23.42-93.5-26.25-12-74-77-130-152-133-39-120-212-129-264-15-54.084-13.075-106.753,9.173-138.488,48.9-31.734-39.726-84.4-61.974-138.487-48.9-52-114-225-105-264,15a162.027,162.027,0,0,0-103.147,43.044c-30.633-45.365-87.1-72.091-145.206-58.044-52-114-225-105-264,15-75,3-140,59-152,133-53,5-127,23-130,83-2,42,35,72,70,86,49,20,106,18,157,5a165.625,165.625,0,0,0,120,0c47,94,178,113,251,33,61.112,8.015,113.854-5.72,150.492-29.764a165.62,165.62,0,0,0,110.861-3.236c47,94,178,113,251,33,31.385,4.116,60.563,2.495,86.487-3.311,25.924,5.806,55.1,7.427,86.488,3.311,73,80,204,61,251-33a165.625,165.625,0,0,0,120,0c51,13,108,15,157-5a147.188,147.188,0,0,0,33.5-18.694,147.217,147.217,0,0,0,33.5,18.694c49,20,106,18,157,5a165.625,165.625,0,0,0,120,0c47,94,178,113,251,33C2446.709,1093.793,2554.709,922.793,2379.709,863.793Z\" transform=\"translate(142.69 -634.312)\" fill=\"#eee\"/>\r\n        </svg>\r\n    </>\r\n}\r\n\r\nexport default Footer;","import {createContext} from 'react';\r\n\r\nexport const PerceptronContext = createContext(null);","const MAX = 10;\r\nconst MAX_Y = MAX, MAX_X = MAX;\r\nconst MIN_Y = -MAX, MIN_X = -MAX;\r\n\r\nclass CPDrawer {\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n        this.widthCanvas = canvas.width;\r\n        this.heightCanvas = canvas.height\r\n    }    \r\n    \r\n    \r\n    // Returns the physical x-coordinate of a logical x-coordinate:\r\n    XC(x) {\r\n        return (x - MIN_X) / (MAX_X - MIN_X) * this.widthCanvas\r\n    }\r\n\r\n    // Returns the physical y-coordinate of a logical y-coordinate:\r\n    YC(y) {\r\n        return this.heightCanvas - ((y - MIN_Y) * this.heightCanvas) / (MAX_Y - MIN_Y);\r\n    }\r\n\r\n    // Returns the logical x-coordinate of a physical x-coordinate:\r\n    XL(x) {\r\n        return ((x * (MAX_X - MIN_X ) ) / this.widthCanvas)  + MIN_X\r\n    }\r\n\r\n    // Returns the logical y-coordinate of a physical y-coordinate:\r\n    YL(y) {\r\n        return MAX_Y - (y *  (MAX_Y - MIN_Y)) / this.heightCanvas;\r\n    }\r\n\r\n    drawAxis() {\r\n        const ctx = this.canvas.getContext(\"2d\"),\r\n            cty = this.canvas.getContext(\"2d\");\r\n        \r\n        ctx.beginPath();\r\n        ctx.moveTo(this.widthCanvas/2,0);\r\n        ctx.lineTo(this.widthCanvas/2,this.heightCanvas);\r\n        ctx.stroke();\r\n\r\n        cty.beginPath();\r\n        cty.moveTo(0,this.heightCanvas/2);\r\n        cty.lineTo(this.widthCanvas,this.heightCanvas/2);\r\n        cty.stroke();\r\n\r\n\r\n        ctx.font = \"10px Arial\";\r\n        ctx.fillStyle = \"#000\"\r\n        for (let i = MIN_X; i < MAX_X; i++) {\r\n            if (i === 0) continue\r\n            ctx.fillText(`${i}`, this.XC(i), this.YC(-0.2));\r\n            ctx.fillText(`${i}`, this.XC(0.1), this.YC(i));\r\n        }\r\n        ctx.fillText(`${MAX_X}`, this.widthCanvas-10, this.YC(-0.2));\r\n        ctx.fillText(`${MAX_Y}`, this.XC(0.1), 10);\r\n    }\r\n\r\n    drawPoint(x, y, value) {\r\n        const rect = this.canvas.getBoundingClientRect(),\r\n            ctx = this.canvas.getContext(\"2d\");\r\n\r\n        if(value === 1){\r\n            ctx.fillStyle = \"#FF0000\";\r\n            ctx.fillRect(x-2,y-2,4,4); //cuadrito\r\n        } else {\r\n            ctx.fillStyle = \"#000000\";\r\n            ctx.beginPath(); \r\n            ctx.arc(x-1.25,y-1.25,2.5,0,2*Math.PI);//circulito\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    drawLine(x1, y1, x2, y2, color=\"#000\") {\r\n        x1 = this.XC(x1);\r\n        x2 = this.XC(x2);\r\n        y1 = this.YC(y1);\r\n        y2 = this.YC(y2);\r\n        \r\n        const context = this.canvas.getContext(\"2d\");\r\n        context.save();\r\n        context.strokeStyle = color;        \r\n        context.beginPath();\r\n        context.moveTo(x1,y1);\r\n        context.lineTo(x2,y2);\r\n        context.stroke();\r\n        context.restore();\r\n    }\r\n\r\n    clearCanvas() {\r\n        const context = this.canvas.getContext(\"2d\");\r\n        \r\n        //context.clearRect(0,0, this.widthCanvas, this.heightCanvas);\r\n\r\n        // Store the current transformation matrix\r\n        context.save();\r\n\r\n        // Use the identity matrix while clearing the canvas\r\n        context.setTransform(1, 0, 0, 1, 0, 0);\r\n        context.clearRect(0, 0, this.widthCanvas, this.heightCanvas);\r\n\r\n        // Restore the transform\r\n        context.restore();\r\n    }\r\n}\r\n\r\nexport default CPDrawer;","import React, {useContext} from 'react';\r\nimport {  PerceptronContext} from \"../components/PerceptronContext\";\r\n\r\nclass  Perceptron {\r\n      \r\n    constructor(size, lr, it, cp, sj){\r\n\r\n        this.estado = cp;\r\n\t\tthis.w  = [];\r\n\t\tthis.learningRate= parseFloat(lr) || 0.01;\r\n        this.iterations =  parseFloat(it) || 100;\r\n        this.error = 0;\r\n        this.errorAcumulado = [];        \r\n        this.MaxAxis = sj;\r\n        for(var i = 0; i<size+1  ; i++){\r\n            this.w[i] = Math.random() * (sj - (-sj)) + (-sj);\r\n        }        \r\n       \r\n\t}\r\n   \r\n\r\n    fit = async (inputs, outputs) =>{\r\n   \r\n        const x = inputs || [\r\n            [3.1, 3.123],\r\n            [4.12, 1.12],\r\n            [3.123, 2],\r\n            [3, 3]\r\n        ];\r\n        const y = outputs || [0,0,1,1];\r\n        \r\n        var done = false;            \r\n        var epoca = 0;\r\n        let x2 = [];\r\n        var sumaError = 0;\r\n        while(done === false){\r\n            done = true;\r\n            //Epocas            \r\n            console.log(\"Epoca: \", epoca+1);\r\n\r\n            for(var j = 0; j<x.length; j++){\r\n                this.error = y[j] - this.predict(x[j]);\r\n                //console.log(\"Error: \",this.error );\r\n                sumaError += this.error;\r\n                if(this.error!=0){\r\n                    done = false;\r\n                    console.log(\"Ajustando w\");\r\n                    this.w[0] += this.learningRate * this.error;\r\n                    for(let k=0;  k< x[j].length; k++){                                                \r\n                        console.log(\"Antes del ajuste: w: %f, error: %d, xj\", this.w[k+1],  this.error, x[j]);\r\n                        this.w[k+1] += this.learningRate * this.error * x[j][k];\r\n                        console.log(\"w %d Despues : %f \",k+1, this.w[k+1]);                        \r\n                    }\r\n                    x2[0] = this.calcularX2(- this.MaxAxis);\r\n                    x2[1] = this.calcularX2( this.MaxAxis);\r\n                    console.log(\"x2: \", x2);\r\n                    console.log(\"w: \", this.w);\r\n                 \r\n                    this.estado.clearCanvas();\r\n                    this.estado.drawAxis();\r\n                    x.forEach ((point, index) => {\r\n                        this.estado.drawPoint(this.estado.XC(point[0]), this.estado.YC(point[1]), y[index])    \r\n                    })                    \r\n                    this.estado.drawLine(- this.MaxAxis,x2[0], this.MaxAxis,x2[1], \"#0101DF\")\r\n                    await new Promise(r => setTimeout(r, 30));\r\n                    \r\n                    \r\n                }\r\n            }\r\n            this.errorAcumulado.push({epoca: \"Ep \"+ parseInt(epoca + 1), error: sumaError});\r\n            epoca += 1;   \r\n            sumaError = 0;\r\n            if(epoca >=this.iterations){\r\n                break;\r\n            }\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    calcularX2 = (x1) =>{\r\n        return  ((-this.w[1] *  x1) + this.w[0] )/ this.w[2];\r\n    }\r\n    \r\n    predict = (inputs) => {\r\n            let suma = -this.w[0];         \r\n            for(var i = 0; i < inputs.length; i++){\r\n                suma += this.w[i+1] * inputs[i];               \r\n            }\r\n            \r\n            const activation = suma  >= 0 ? 1 : 0;            \r\n            return activation;\r\n            \r\n        }\r\n      \r\n\r\n        \r\n          \r\n}\r\nexport default Perceptron;","import React, { useContext } from 'react';\r\nimport { PerceptronContext } from \"./PerceptronContext.js\";\r\nimport CSVReader from 'react-csv-reader'\r\n\r\nconst CsvReader = (props) =>{\r\n  const {perceptronState, setPerceptronState} = useContext(PerceptronContext);\r\n  const agregarPuntos = (data) => {\r\n    console.log(data);\r\n    let inputs = [];\r\n    let outputs = [];\r\n    data.forEach ((point, index) => {\r\n      if(index !== 0){\r\n        /*let target = 0;\r\n        if(point[4] === 'Setosa'){\r\n          target = 1;          \r\n        }*/\r\n        perceptronState.cpDrawer.drawPoint(perceptronState.cpDrawer.XC(parseFloat(point[0])), \r\n          perceptronState.cpDrawer.YC(parseFloat(point[1])), parseFloat(point[2]) )    \r\n        inputs.push([parseFloat(point[0]), parseFloat(point[1])])\r\n        outputs.push(parseFloat(point[2]))\r\n        //outputs.push(target)\r\n      }\r\n      \r\n   })          \r\n\r\n   setPerceptronState({\r\n     ...perceptronState,\r\n     x: inputs, \r\n     y:outputs,\r\n     csvLeido :true\r\n   })\r\n\r\n  }\r\n\r\n    return <>\r\n      <CSVReader onFileLoaded={(data, fileInfo) =>         \r\n        agregarPuntos(data)\r\n      } />\r\n    </>\r\n    \r\n  \r\n}\r\nexport default CsvReader;","import React,{useContext, useState} from \"react\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport Perceptron from '../algoritmos/Perceptron.js';\r\nimport { PerceptronContext } from \"./PerceptronContext.js\";\r\nimport CsvReader from './CsvReader.js';\r\n\r\n\r\n\r\n\r\nconst PerceptronConfigs = (props) =>  {\r\n        \r\n    //const [csvLeido, setCsvLeido] = useState(false);    \r\n    const { handleSubmit, register, errors, control } = useForm();\r\n    const {perceptronState, setPerceptronState} = useContext(PerceptronContext);\r\n    const [perceptronErrors, setPerceptronErrors] = useState({});\r\n    const sizeEjes = 10;\r\n    const iniciarPesos = async (values) =>{\r\n        console.log(values);\r\n        setPerceptronErrors({});\r\n        if (!perceptronState?.x?.length) {\r\n            setPerceptronErrors({\r\n                trainingSet: {\r\n                    message: \"Agregue datos de entrenamiento\"\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        const perceptron = new Perceptron(\r\n            perceptronState.x[0].length, \r\n            values.learning_rate, \r\n            values.max_epic_number, \r\n            perceptronState.cpDrawer, \r\n            sizeEjes);\r\n        setPerceptronState( {\r\n            ...perceptronState,\r\n            perceptron,\r\n        \r\n        });       \r\n        const x2 = []; \r\n        x2[0] = perceptron.calcularX2(-sizeEjes);\r\n        x2[1] = perceptron.calcularX2(sizeEjes);\r\n        console.log(\"x2: \", x2);\r\n        perceptronState.cpDrawer.drawLine(-sizeEjes, x2[0], sizeEjes, x2[1], \"#0101DF\" );\r\n\r\n      }\r\n      const entrenar = async () =>{     \r\n        setPerceptronErrors({});\r\n        if (!perceptronState.perceptron) {\r\n            setPerceptronErrors({\r\n                \"trainedPerceptron\": {\r\n                    message: \"Primero inicialice el perceptron\"\r\n                }\r\n            });\r\n            return;\r\n        }           \r\n        await perceptronState.perceptron.fit(perceptronState.x, perceptronState.y);     \r\n        const xd = perceptronState.perceptron.errorAcumulado.length >= perceptronState.perceptron.iterations;\r\n        console.log(\"limite; \",xd);\r\n        setPerceptronState( {\r\n            ...perceptronState,\r\n            entrenado: true,\r\n            limiteAlcanzado: xd\r\n        });           \r\n        console.log(perceptronState.perceptron.w);\r\n    }\r\n\r\n    const reiniciar = () =>{\r\n        perceptronState.cpDrawer.clearCanvas();\r\n        perceptronState.cpDrawer.drawAxis();\r\n        setPerceptronState( {\r\n            ...perceptronState,\r\n            perceptron : null,\r\n            entrenado: false,\r\n            x : [],\r\n            y : [],   \r\n            csvLeido: false                                 \r\n        });           \r\n    }\r\n      \r\n    return <>\r\n        {  \r\n            !perceptronState.csvLeido &&\r\n                <>                   \r\n                    <CsvReader/>\r\n                </>\r\n        }\r\n\r\n\r\n        {\r\n\r\n        perceptronState.csvLeido &&\r\n            <div>\r\n        <Form onSubmit={handleSubmit(iniciarPesos)} className=\"\">\r\n           \r\n            <Controller\r\n                as={TextField}\r\n                name=\"learning_rate\"\r\n                control={control}\r\n                id=\"learning_rate\"\r\n                name=\"learning_rate\"\r\n                label=\"Nivel de aprendizaje\"\r\n                rules={{\r\n                    required: \"Este campo es requerido\",\r\n                    validate: value => (parseFloat(value, 10) > 0 && parseFloat(value, 10) <= 1)  || \"El valor debe ser entre 0 y 1\",\r\n                }}\r\n                helperText={errors?.learning_rate?.message}\r\n                error={!!errors?.learning_rate}\r\n                defaultValue = {0.01}\r\n                margin=\"normal\"\r\n                fullWidth\r\n            />\r\n            <Controller\r\n                defaultValue ={1000}\r\n                as={TextField}\r\n                name=\"max_epic_number\"\r\n                control={control}\r\n                id=\"max_epic_number\"\r\n                name=\"max_epic_number\"\r\n                label=\"Número máximo de épocas\"\r\n                rules={{ required: \"Este campo es requerido\" }}\r\n                helperText={errors?.max_epic_number?.message}\r\n                error={!!errors?.max_epic_number}\r\n                margin=\"normal\"\r\n                fullWidth\r\n            />\r\n\r\n            {\r\n                perceptronErrors.trainingSet &&\r\n                <span className=\"error\">{perceptronErrors.trainingSet.message}</span>\r\n            }\r\n\r\n            {\r\n                perceptronErrors.trainedPerceptron &&\r\n                <span className=\"error\">{perceptronErrors.trainedPerceptron.message}</span>\r\n            }\r\n            \r\n            <Button className=\"mt-4\" type=\"sumbit\" fullWidth color=\"primary\" style={{color: \"#03A9F4\"}}>  Inicializar </Button>\r\n            \r\n        </Form>\r\n        <Form onSubmit={handleSubmit(entrenar)} className=\"\">                        \r\n            <Button className=\"mt-4\" type=\"sumbit\" fullWidth color=\"primary\" style={{color: \"#03A9F4\"}}>Entrenar</Button>\r\n        </Form>\r\n        \r\n        <Form onSubmit={handleSubmit(reiniciar)} className=\"\">                        \r\n            <Button className=\"mt-4\" type=\"sumbit\" fullWidth color=\"primary\" style={{color: \"#03A9F4\"}}>Reiniciar</Button>\r\n        </Form>\r\n        </div>\r\n    }\r\n    </>\r\n}\r\n\r\nexport default PerceptronConfigs;","import React,{useContext, useEffect, useState } from \"react\";\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer} from 'recharts';\r\nimport { PerceptronContext } from \"./PerceptronContext\";\r\n\r\n\r\nconst ErrorChart = (props) =>  {\r\n    const {perceptronState} = useContext(PerceptronContext);\r\n    const MAX_ELEMENTS_TO_SHOW = 20;\r\n    let [dataToShow, setDataToShow] = useState([]);\r\n    let [itemsViewed, setItemsViewed] = useState(0);\r\n    let [infoGrouped, setInfoGrouped] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n      setInfoGrouped(groupElements(perceptronState.perceptron.errorAcumulado));\r\n      let firstDataToShow = groupElements(perceptronState.perceptron.errorAcumulado);\r\n      setDataToShow(firstDataToShow[itemsViewed].data);\r\n    }, [])\r\n\r\n    /*const getHarcodedInfo = () => {\r\n      let data = [];\r\n      for(let i = 0; i < 33; i++){\r\n        data.push({'epoca': i+1, 'error': Math.floor(Math.random() * (20 - 1)) + 1})\r\n      }\r\n      return data;\r\n    }*/\r\n\r\n    const groupElements = (data) => {\r\n      let infoGrouped = [{'index': 0, 'data': []}],\r\n        objectIndex = 0,\r\n        insertedElements = 1;\r\n      for(let i = 0; i < data.length; i++){\r\n        \r\n        if(insertedElements == MAX_ELEMENTS_TO_SHOW){\r\n          infoGrouped[objectIndex].data.push(data[i])\r\n          objectIndex++;\r\n          infoGrouped.push({'index': objectIndex, 'data': []})\r\n          insertedElements = 1;\r\n          continue\r\n        } else {\r\n          infoGrouped[objectIndex].data.push(data[i])\r\n        }\r\n\r\n        insertedElements++;\r\n      }\r\n     return infoGrouped;\r\n    }\r\n\r\n    const nextData = () => {\r\n      setItemsViewed(itemsViewed == infoGrouped.length ? itemsViewed = infoGrouped.length-1: ++itemsViewed)\r\n      if(itemsViewed < infoGrouped.length){\r\n        setDataToShow(infoGrouped[itemsViewed].data);\r\n      }\r\n    }\r\n\r\n    const afterData = () => {\r\n      setItemsViewed(itemsViewed == 0 ? itemsViewed = 0: --itemsViewed)\r\n      if(itemsViewed < infoGrouped.length){\r\n        setDataToShow(infoGrouped[itemsViewed].data);\r\n      }\r\n    }\r\n\r\n    return <>\r\n        <Button onClick={() => afterData()} className=\"m-4\"  variant=\"contained\" color=\"primary\">Anteriores {MAX_ELEMENTS_TO_SHOW}</Button>\r\n        <Button  onClick={() => nextData()} className=\"m-4\"  variant=\"contained\" color=\"primary\">Siguientes {MAX_ELEMENTS_TO_SHOW}</Button>\r\n        <br></br>\r\n        <span>Mostrando un total de {perceptronState.perceptron.errorAcumulado.length}</span>\r\n        <ResponsiveContainer>               \r\n          <LineChart \r\n            //data={perceptronState.perceptron.errorAcumulado} \r\n            data={dataToShow}\r\n            margin={{\r\n              top: 5, right: 30, left: 20, bottom: 5,\r\n            }}\r\n          >          \r\n            <Line type=\"monotone\" dataKey=\"error\" stroke=\"#1976d2\" activeDot={{ r: 8 }}/>\r\n              <CartesianGrid stroke=\"#ccc\" />\r\n              <XAxis dataKey=\"epoca\" interval={0} angle={60} dx={20}/>\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n    </>\r\n}\r\n\r\nexport default ErrorChart;","import React, {useContext} from 'react';\r\nimport { PerceptronContext } from \"./PerceptronContext.js\";\r\n\r\nconst Alert = (props) => {\r\n    const {perceptronState} = useContext(PerceptronContext);\r\n    console.log(\"alert limite: \", perceptronState.limiteAlcanzado);\r\n    return <>\r\n        {\r\n            !perceptronState.limiteAlcanzado &&\r\n            <div>                        \r\n                <span className=\"error\">{\"Entrenamiento finalizado\"}</span>\r\n            </div>                \r\n        }   \r\n        \r\n        <div>                        \r\n            <span className=\"error\">{\"Número de epocas: \"}</span>\r\n        </div>        \r\n        <div>                        \r\n            <span className=\"error\">{perceptronState.perceptron.errorAcumulado.length}</span>\r\n        </div>\r\n        {\r\n            perceptronState.limiteAlcanzado &&\r\n            <div>                        \r\n                <span className=\"error\">{\"No se encontró un hiperplano que los separe\"}</span>\r\n            </div>    \r\n        }\r\n    </>\r\n\r\n}\r\n\r\n\r\nexport default Alert;","import React, {useContext, useState, Component} from \"react\";\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nimport CartesianPlane from '../components/CartesianPlane';\r\nimport PerceptronConfigs from '../components/PerceptronConfigs';\r\nimport ErrorChart from '../components/ErrorChart';\r\nimport { PerceptronContext } from \"../components/PerceptronContext\";\r\nimport Alert from '../components/Alert.js';\r\nconst Perceptron = (props) => {\r\n    const {perceptronState} = useContext(PerceptronContext); \r\n    return <>\r\n        <Container fluid>\r\n            \r\n            <Row>\r\n                <Col\r\n                    md={{span: 7}}\r\n                    sm={{span: 12}}\r\n                >\r\n                    <div className=\"card card--box\">\r\n                        <div className=\"card__header\">\r\n                            Plano cartesiano\r\n                        </div>\r\n                        <CartesianPlane />\r\n                    </div>\r\n                </Col>\r\n                <Col \r\n                    md={{span: 5}}\r\n                    sm={{span: 12}}\r\n                >\r\n                    <div className=\"card card--box\">\r\n                        <div className=\"card__header\">\r\n                            Configuraciones\r\n                        </div>\r\n                        <PerceptronConfigs />                       \r\n                    </div>\r\n                    {  \r\n                        perceptronState.entrenado &&         \r\n                        <Row>\r\n                            <Col\r\n                                md={{span: 12}}\r\n                                sm={{span: 5}}\r\n                                >\r\n                                <div className=\"card card--box\">\r\n                                    \r\n                                    <div style={{ width: '100%', height: 75 }}>\r\n                                        <Alert />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>                                                            \r\n                    }\r\n                </Col>\r\n            </Row>\r\n           \r\n            {\r\n                perceptronState.entrenado && \r\n                <Row>\r\n                    <Col sm={{span: 12}}>\r\n                        <div className=\"card card--box\">\r\n                            <div className=\"card__header\">\r\n                                Grafica\r\n                            </div>\r\n                            <div style={{ width: '100%', height: 500, paddingBottom: '11%'}}>\r\n                                {\r\n                                    perceptronState.perceptron.errorAcumulado != 0 && \r\n                                    <ErrorChart />\r\n                                }\r\n                                {\r\n                                    perceptronState.perceptron.errorAcumulado == 0 && \r\n                                    <span>No hay información para mostrar</span>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default Perceptron;","import React, { useState } from 'react';\r\nimport '../styles/App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport Perceptron from '../pages/Perceptron';\r\nimport {PerceptronContext} from '../components/PerceptronContext';\r\n\r\n\r\nfunction App() { \r\n  const [perceptronState, setPerceptronState] = useState({\r\n    perceptron : null,\r\n    entrenado: false,\r\n    x : [],\r\n    y : [],    \r\n    cpDrawer: null,\r\n    limiteAlcanzado: false,\r\n    csvLeido: false\r\n  });\r\n\r\n \r\n  return (\r\n    <div className=\"App\">\r\n      <PerceptronContext.Provider value = {{\r\n          perceptronState, \r\n          setPerceptronState\r\n      }}>\r\n        <Header />\r\n\r\n        <Perceptron />\r\n\r\n        <Footer />\r\n      </PerceptronContext.Provider>\r\n      \r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js'; \n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}